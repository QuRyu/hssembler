
==================== FINAL INTERFACE ====================
2017-10-24 19:57:07.957089 UTC

interface main@main:Main 8002
  interface hash: d6fa33756d0c8480bb0a90dfd174eafb
  ABI hash: f2deb8813b1bd30ca25d7014a1c58239
  export-list hash: a973e20115e1601feca0e15b6eec19f7
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a3bc3eb2dfe574d1b290456bde10d478
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.lexer
  Main.lineNumber
  Main.main
  Main.parse
  Main.parser
  Main.printer
module dependencies: Command
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Either 20b09ef8d0a5b74fdec011c40c1587f5
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.Environment 08cb808e8e6a7821e6f8cfa76a977431
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  Command ec6d35231975fb359199b85e5819035a
  exports: d5de60b8846c7943b075c528135c7872
  Command 1f34404df6e25df9ee9469de16d2169f
  command 93f79e9e855175e7a5833badeaf36ded
  converter 13b26d4cf56ce78e26637906ffeaa6d4
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
b9160427a05f3b4dc49f1d49716e9299
  lexer ::
    [(GHC.Base.String, GHC.Types.Int)]
    -> Data.Either.Either GHC.Base.String [Command.Command]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [(GHC.Base.String, GHC.Types.Int)]) ->
                 case Main.lexer_go x Main.lexer1 of wild {
                   Data.Either.Left l -> wild
                   Data.Either.Right r
                   -> Data.Either.Right
                        @ [GHC.Types.Char]
                        @ [Command.Command]
                        (GHC.List.reverse @ Command.Command r) }) -}
7d74baced9e7cb42493d26efc65cb61b
  lexer1 :: Data.Either.Either GHC.Base.String [Command.Command]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ GHC.Base.String
                   @ [Command.Command]
                   (GHC.Types.[] @ Command.Command)) -}
53b501b3d49fb55fd79eedc2aad034bc
  lexer_go ::
    [(GHC.Base.String, GHC.Types.Int)]
    -> Data.Either.Either GHC.Base.String [Command.Command]
    -> Data.Either.Either GHC.Base.String [Command.Command]
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
8513502e80342b09fcbd40840392948c
  lineNumber ::
    [GHC.Base.String] -> [(GHC.Base.String, GHC.Types.Int)]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (y :: [GHC.Base.String]) ->
                 GHC.Base.build
                   @ ([GHC.Types.Char], GHC.Types.Int)
                   (\ @ b1
                      (c :: ([GHC.Types.Char], GHC.Types.Int) -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.List.foldr2
                      @ [GHC.Types.Char]
                      @ GHC.Types.Int
                      @ b1
                      (GHC.List.zipFB @ [GHC.Types.Char] @ GHC.Types.Int @ b1 @ b1 c)
                      n
                      y
                      Main.lineNumber1)) -}
2cc28c849bc7317677f59f12f0d67c7e
  lineNumber1 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 1# 9223372036854775807#) -}
840401f77723c2f6b6c1e87653a61595
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
163ee8dbc0e305797b0c5892fe23eebf
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Environment.getArgs1 s of ds1 { (#,#) ipv ipv1 ->
                 Main.main2 ipv1 ipv }) -}
0c84b8c5b253af5782feaf70f081a655
  main2 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
8517b74012681966fddc95c5c688c976
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
c5e85cd6a9be9ccb001d4d5d710dcc1a
  parse ::
    GHC.Base.String
    -> Data.Either.Either GHC.Base.String [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: GHC.Base.String) ->
                 case Main.lexer_go (Main.parse1 x) Main.lexer1 of wild {
                   Data.Either.Left l
                   -> Data.Either.Left @ GHC.Base.String @ [GHC.Base.String] l
                   Data.Either.Right r
                   -> Data.Either.Right
                        @ GHC.Base.String
                        @ [GHC.Base.String]
                        (GHC.Base.map
                           @ Command.Command
                           @ [GHC.Types.Char]
                           Command.converter
                           (GHC.List.reverse1
                              @ Command.Command
                              r
                              (GHC.Types.[] @ Command.Command))) }) -}
e7f638ec630515358abb6cc0bf605c50
  parse1 :: GHC.Base.String -> [(GHC.Base.String, GHC.Types.Int)]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Base.String) ->
                 GHC.Base.build
                   @ ([GHC.Types.Char], GHC.Types.Int)
                   (\ @ b1
                      (c :: ([GHC.Types.Char], GHC.Types.Int) -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.List.foldr2
                      @ [GHC.Types.Char]
                      @ GHC.Types.Int
                      @ b1
                      (GHC.List.zipFB @ [GHC.Types.Char] @ GHC.Types.Int @ b1 @ b1 c)
                      n
                      (Data.OldList.lines x)
                      Main.lineNumber1)) -}
946f6b3fe0d17f75fbb3e33556db69af
  parser ::
    Data.Either.Either GHC.Base.String [Command.Command]
    -> Data.Either.Either GHC.Base.String [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Either.Either GHC.Base.String [Command.Command]) ->
                 case ds of wild {
                   Data.Either.Left a
                   -> Data.Either.Left @ GHC.Base.String @ [GHC.Base.String] a
                   Data.Either.Right commands
                   -> Data.Either.Right
                        @ GHC.Base.String
                        @ [GHC.Base.String]
                        (GHC.Base.build
                           @ [GHC.Types.Char]
                           (\ @ b1
                              (c :: [GHC.Types.Char] -> b1 -> b1)[OneShot]
                              (n :: b1)[OneShot] ->
                            GHC.Base.foldr
                              @ Command.Command
                              @ b1
                              (GHC.Base.mapFB
                                 @ [GHC.Types.Char]
                                 @ b1
                                 @ Command.Command
                                 c
                                 Command.converter)
                              n
                              commands)) }) -}
86f6166d52915936f1d59b4cad211ca8
  printer :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

